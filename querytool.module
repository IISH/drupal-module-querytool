<?php


/**
 * Implements hook_help().
 */
function querytool_help($path, $arg)
{
  switch ($path) {
    case 'admin/help#querytool':
      querytool_helpcontent();
      break;
  }
}

/**
 * Shows help content.
 */
function querytool_helpcontent()
{
  $filepath = dirname(__FILE__) . '/README.md';
  if (file_exists($filepath)) {
    $readme = file_get_contents($filepath);
  } else {
    $filepath = dirname(__FILE__) . '/README.txt';
    if (file_exists($filepath)) {
      $readme = file_get_contents($filepath);
    }
  }

  if (module_exists('markdown')) {
    $filters = module_invoke('markdown', 'filter_info');
    $info = $filters['filter_markdown'];

    if (function_exists($info['process callback'])) {
      $output = $info['process callback']($readme, NULL);
    } else {
      $output = '<pre>' . $readme . '</pre>';
    }
  } else {
    $output = '<pre>' . $readme . '</pre>';
  }

  return $output;


}

/**
 * Implements hook_menu().
 */
function querytool_menu()
{
  $items = array();

  $items['querytool/%'] = array(
    'title' => 'Topics',
    'page callback' => 'querytool',
    'page arguments' => array(1),
    'access callback' => true,
      'weight' => -99
  );

  $items['admin/config/system/querytool'] = array(
    'title' => 'Query Tool',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('querytool_admin_form'),
    'access arguments' => array('administer querytool'),
  );
  $items['admin/config/system/querytool/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer querytool'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1
  );
  $items['admin/config/system/querytool/help'] = array(
    'title' => 'Help',
    'access arguments' => array('administer querytool'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'querytool_helpcontent',
    'weight' => 5
  );

  $items['download/%/%/%'] = array(
    'title' => 'Download',
    'page callback' => 'querytool_download_page',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'),

  );
  return $items;
}


/**
 *  Download form for confirmation.
 */
function querytool_download_page($endpoint,$key,$filename)
{
  global $language;

  $url = variable_get('querytool_api_url') .$endpoint."?".$key."=".$filename;
  $license = variable_get('querytool_lisenceinfo_' . $language->language);

  $decline_msg = t("You have accept in order to download the data.");
  $agree = l('Accept',$url, array("attributes"=>array('class' => 'btn btn-primary')));
  $decline = l('Decline',null,array("attributes"=>array('class' => 'disagree', 'onClick' => 'alert("'.$decline_msg.'")')));

  return $license['value'].$agree.$decline;
}



/**
 *  Shows the Query Tool Interface
 */
function querytool($arg)
{
  return '';
}


/**
 * Implements hook_theme().
 */
function querytool_theme()
{
  return array(
    'querytool_page' => array(
      'template' => 'theme/querytool-page',
      'render element' => 'page'
    ),
    'querytool_html' => array(
      'template' => 'theme/querytool-html',
      'render element' => 'html'
    ),
  );
}

/**
 * Implements hook_js_alter().
 */
function querytool_js_alter(&$javascript)
{
  if (arg(0) == "querytool") {
    foreach ($javascript as $path => $file) {
      if (strpos($path, "querytool") == 0 && $file["type"] !== "inline") {
        unset($javascript[$path]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function querytool_preprocess_html(&$variables, $hook)
{

  if (arg(0) == "catalog" || arg(0) == "download") {
    $path = drupal_get_path('module', 'querytool');
    drupal_add_css($path . "/css/common.css", array('group' => 999, 'weight' => 996));
  }


  if (arg(0) == "querytool") {
    $variables['theme_hook_suggestions'][] = 'querytool_html';

    $path = drupal_get_path('module', 'querytool');
    $variables["querytool_path"] = $path;
    drupal_add_css($path . "/css/bootstrap.min.css", array('group' => 999, 'weight' => 996));
    drupal_add_css($path . "/css/styles.css", array('group' => 999, 'weight' => 997));
    drupal_add_css($path . "/css/tree.css", array('group' => 999, 'weight' => 998));
    drupal_add_css($path . "/css/multi-select.css", array('group' => 999, 'weight' => 999));
    drupal_add_css("https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css", array('group' => 999, "type" => "external", 'weight' => 999));

    drupal_add_js($path . "/js/vendor/jquery-1.12.0.min.js");
    drupal_add_js($path . "/js/vendor/jquery.nicescroll.min.js");
    drupal_add_js($path . "/js/vendor/jquery.multi-select.js");
    drupal_add_js($path . "/js/vendor/jquery.quicksearch.js");

    drupal_add_js($path . "/js/vendor/underscore-min.js");
    drupal_add_js($path . "/js/vendor/bootstrap.min.js");
    drupal_add_js($path . "/js/vendor/backbone-min.js");
    drupal_add_js($path . "/js/vendor/d3.min.js");
    drupal_add_js($path . "/js/vendor/polyglot.min.js");

    drupal_add_js($path . "/js/models/QuerySettings.js");
    drupal_add_js($path . "/js/general.js");
    drupal_add_js($path . "/js/models/Documentation.js");
    drupal_add_js($path . "/js/models/Years.js");
    drupal_add_js($path . "/js/models/Regions.js");
    drupal_add_js($path . "/js/models/Classification.js");

    drupal_add_js($path . "/js/collections/ClassListCollection.js");

    drupal_add_js($path . "/js/views/QueryModuleView.js");
    drupal_add_js($path . "/js/views/QuerySettingsView.js");
    drupal_add_js($path . "/js/views/TopicSelector.js");
    drupal_add_js($path . "/js/views/RegionSelector.js");
    drupal_add_js($path . "/js/views/YearSelector.js");
    drupal_add_js($path . "/js/views/ClassModeSelector.js");
    drupal_add_js($path . "/js/views/ClassBoxView.js");
    drupal_add_js($path . "/js/views/Connector.js");
    drupal_add_js($path . "/js/views/DataTreeView.js");
    drupal_add_js($path . "/js/views/ResultView.js");

    drupal_add_js($path . "/js/vendor/grid/Grid.js", array("scope" => "footer"));
    drupal_add_css($path . "/js/vendor/grid/Grid.css");


    // define language
    global $language;

    $lang_code = arg(2);
    if(!isset($lang_code)){
      $lang_code = $language->language;
    }

    if ($language->language !== $lang_code) {
      $lang = $lang_code;
      $langs = language_list();

      foreach ($langs as $key => $lang_obj) {
        if ($lang == $key) {
          $language = $lang_obj;
        }
      }
    } else {
      $lang = $language->language;
    }

    // get term

    $datatype = str_replace("-", ".", arg(1));
    $term = _querytool_get_term($datatype, $lang);
    $root = $term->field_root_id[LANGUAGE_NONE][0]['value'];
    $files = _querytool_get_files($root);

    $variables['title'] = $datatype . " - " . $term->name;

    $settings = array("lang" => $lang,
                      "datatype" => $datatype,
                      "baseurl" => variable_get('querytool_api_url'),
                      "downloadurl" => variable_get('querytool_download_url'),
                      "moduleurl" => "/" . drupal_get_path("module", "querytool"),
                      "debugmode" => variable_get('querytool_debugmode'),
                      "confirmmode" => variable_get('querytool_confirmmode'),
                      "files" => $files,
                      "user_logged_in" => user_is_logged_in(),
                      );

    $classmode = arg(3);
    if(isset($classmode)){
      $settings["classmode"] = $classmode;
    }


    $js_settings = json_encode($settings);

    drupal_add_js($path . "/js/locales/" . $lang . ".js");
    drupal_add_js($path . "/js/polyglot.init.js");
    drupal_add_js("var qtSettings = " . $js_settings . ";", array('type' => 'inline', 'scope' => 'footer', 'weight' => 3));
    drupal_add_js($path . "/js/App.js", array('scope' => 'footer', 'weight' => 4));
    drupal_add_js($path . "/js/Tree.js", array('scope' => 'footer', 'weight' => 5));
  }

}

/**
 *   Get term by datatype given in url eg: "1-01"
 */
function _querytool_get_term($datatype, $lang)
{
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'topics')
    ->fieldCondition('field_datatype', 'value', $datatype, '=')
    ->propertyCondition('language', $lang, '=');
  $result = $query->execute();

  $values = array_values($result["taxonomy_term"]);
  $first = array_shift($values);
  $term = taxonomy_term_load($first->tid);

  return $term;
}

/**
 *   Gets files of main topic
 */
function _querytool_get_files($root_id)
{
  global $language;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'topics')
    ->fieldCondition('field_datatype', 'value', $root_id, '=')
    ->propertyCondition('language', $language->language, '=');
  $result = $query->execute();

  if(empty($result["taxonomy_term"])){
    return array();
  }
  $values = array_values($result["taxonomy_term"]);
  $first = array_shift($values);

  $term = taxonomy_term_load($first->tid);

  $files = array();
  if ($term->field_documentation) {
    $documentation = $term->field_documentation[LANGUAGE_NONE];

    foreach ($documentation as $file) {
      $files[$file["filename"]] = file_create_url($file["uri"]);
    }
  }
  return $files;
}


/**
 * Implements hook_preprocess_page().
 */
function querytool_preprocess_page(&$variables, $hook)
{
  if (arg(0) == "querytool") {
    $current_lang = (strlen(arg(2)) !== 2) ? "en" : arg(2);
    $datatype = str_replace("-", ".", arg(1));
    $term = _querytool_get_term($datatype, $current_lang);
    $datatype = $term->field_datatype[LANGUAGE_NONE][0]['value'];
    $variables['theme_hook_suggestions'][] = 'querytool_page';
    $variables['title'] = $datatype . " - " . $term->name;

    $langs = language_list();
    krsort($langs);

    $langmenu = "";

    foreach ($langs as $key => $lang) {
      if ($current_lang == $key) {
        $class = 'active';
      } else {
        $class = '';
      }
      $chop = ($key == "ru") ? 4 : 3;
      $langmenu .= "<a class='" . $class . "' href='/querytool/" . arg(1) . "/" . $key . "'>" . substr($lang->native, 0, $chop) . "</a><br>";
    }
    $variables['lang_menu'] = $langmenu;
  }

  $variables['copyright'] = variable_get('querytool_copyright');
}


/**
 * Implements hook_form_alter().
 *
 * Adds all roots (all languages) te parent box
 */
function querytool_form_alter(&$form, &$form_state, $form_id)
{

  if ($form_id == "taxonomy_form_term") {
    $vocabulary = taxonomy_vocabulary_machine_name_load('topics');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $options = array(array_shift($form['relations']['parent']['#options']));
    foreach ($terms as $term) {
      $root = $term->field_root_id[LANGUAGE_NONE][0]['value'];
      $datatype = $term->field_datatype[LANGUAGE_NONE][0]['value'];
      if ($root == '0') $options[$term->tid] = $datatype . ". " . $term->name;
    }
    $form['relations']['parent']['#options'] = $options;
  }
}


/**
 * Implements hook_form().
 *
 * Provides settings form.
 */
function querytool_admin_form($form, &$form_state)
{

  $api_url = variable_get('querytool_api_url', '');
  $import_url = variable_get('querytool_import_url', '');

  $form['querytool_api_url'] = array(
    '#type' => 'textfield',
    '#default_value' => $api_url,
    '#title' => t('Enter API base url'),
  );

  $form['querytool_import_url'] = array(
    '#type' => 'textfield',
    '#default_value' => $import_url,
    '#title' => t('Enter API url to import topics from.'),
  );

  $form['querytool_download_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('querytool_download_url', ''),
    '#title' => t('Enter API url as download base url.'),
  );

  $form['querytool_debugmode'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('querytool_debugmode', ''),
    '#title' => t('Debug mode'),
    '#description' => t("Will show some extra info for developers."),
  );

  $form['querytool_confirmmode'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('querytool_confirmmode', ''),
    '#title' => t('Confirm mode'),
    '#description' => t("Enabled, the user most confirm when changing major settings in the interface, to make him conscious about losing made selections. "),
  );

  $form['querytool_copyright'] = array(
    '#type' => 'textarea',
    '#default_value' => variable_get('querytool_copyright', ''),
    '#title' => t('Copyright notice'),
    '#description' => t("The text of the copyright in footer."),
  );

  $info_en = variable_get('querytool_lisenceinfo_en');
  $form['querytool_lisenceinfo_en'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#default_value' => $info_en['value'],
    '#title' => t('English license info'),
    '#description' => t("The license info shown before downloading datasets."),
  );

  $info_ru = variable_get('querytool_lisenceinfo_ru');
  $form['querytool_lisenceinfo_ru'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#default_value' => $info_ru['value'],
    '#title' => t('Russian license info'),
    '#description' => t("The license info shown before downloading datasets."),
  );


  // adding links
  if ($api_url) $form['querytool_api_url']['#field_suffix'] = t('<a href="@url" target="_blank">view</a>', array('@url' => $api_url));
  if ($import_url) $form['querytool_import_url']['#field_suffix'] = t('<a href="@url" target="_blank">view</a>', array('@url' => $import_url));

  return system_settings_form($form);
}


/**
 * Implements hook_permission().
 */
function querytool_permission()
{
  return array(
    'administer querytool' => array(
      'title' => t('Administer Query Tool'),
    ),
  );
}


?>
